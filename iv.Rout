
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R è un software libero ed è rilasciato SENZA ALCUNA GARANZIA.
Siamo ben lieti se potrai redistribuirlo, ma sotto certe condizioni.
Scrivi 'license()' o 'licence()' per dettagli su come distribuirlo.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Scrivi 'demo()' per una dimostrazione, 'help()' per la guida in linea, o
'help.start()' per l'help navigabile con browser HTML.
Scrivi 'q()' per uscire da R.

> library('AER')
Carico il pacchetto richiesto: car
Carico il pacchetto richiesto: carData
Carico il pacchetto richiesto: lmtest
Carico il pacchetto richiesto: zoo

다음의 패키지를 부착합니다: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Carico il pacchetto richiesto: sandwich
Carico il pacchetto richiesto: survival
Registered S3 methods overwritten by 'AER':
  method          from    
  fitted.survreg  survival
  nobs.survreg    survival
  weights.survreg survival
> d <- read.csv('BH-Sph-DM.csv')
> names(d)
[1] "Galaxy"               "log.M_BH.M_Sun."      "log.M_BH.M_Sun._std" 
[4] "log.M_sph.M_Sun."     "log.M_sph.M_Sun._std" "log.M_DM.M_Sun."     
[7] "log.M_DM.M_Sun._std" 
> naive_OLS <- lm(log.M_BH.M_Sun. ~ log.M_sph.M_Sun., data=d)
> IV <- ivreg(log.M_BH.M_Sun. ~ log.M_sph.M_Sun. | log.M_DM.M_Sun., data=d)
> 
> summary(naive_OLS)

Call:
lm(formula = log.M_BH.M_Sun. ~ log.M_sph.M_Sun., data = d)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.82188 -0.38821 -0.02139  0.25286  1.17493 

Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
(Intercept)       -6.5610     2.3772  -2.760  0.00936 ** 
log.M_sph.M_Sun.   1.3684     0.2341   5.846 1.52e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.524 on 33 degrees of freedom
Multiple R-squared:  0.5088,	Adjusted R-squared:  0.4939 
F-statistic: 34.18 on 1 and 33 DF,  p-value: 1.516e-06

> summary(IV, diagnostics=TRUE)

Call:
ivreg(formula = log.M_BH.M_Sun. ~ log.M_sph.M_Sun. | log.M_DM.M_Sun., 
    data = d)

Residuals:
      Min        1Q    Median        3Q       Max 
-1.110032 -0.397493 -0.007124  0.504891  1.521260 

Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
(Intercept)      -14.0488     4.0057  -3.507  0.00133 ** 
log.M_sph.M_Sun.   2.1062     0.3946   5.338  6.8e-06 ***

Diagnostic tests:
                 df1 df2 statistic  p-value    
Weak instruments   1  33     27.87 8.09e-06 ***
Wu-Hausman         1  32     10.91  0.00236 ** 
Sargan             0  NA        NA       NA    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.5977 on 33 degrees of freedom
Multiple R-Squared: 0.3609,	Adjusted R-squared: 0.3415 
Wald test:  28.5 on 1 and 33 DF,  p-value: 6.802e-06 

> 
> #is the instrument relevant?
> cor.test(d$log.M_sph.M_Sun., d$log.M_DM.M_Sun.)

	Pearson's product-moment correlation

data:  d$log.M_sph.M_Sun. and d$log.M_DM.M_Sun.
t = 5.2793, df = 33, p-value = 8.093e-06
alternative hypothesis: true correlation is not equal to 0
95 percent confidence interval:
 0.4433935 0.8240793
sample estimates:
      cor 
0.6766576 

> 
> #Let's bootstrap within the error bars, shall we?
> 
> set.seed(888)
> 
> bootstrap_ols <- function(i)
+ {
+     y <- d$log.M_BH.M_Sun. + rnorm(length(d$log.M_BH.M_Sun.))*d$log.M_BH.M_Sun._std
+     x <- d$log.M_sph.M_Sun. + rnorm(length(d$log.M_sph.M_Sun.))*d$log.M_sph.M_Sun._std
+     z <- d$log.M_DM.M_Sun. + rnorm(length(d$log.M_DM.M_Sun.))*d$log.M_DM.M_Sun._std
+     lm(y ~ x)$coefficients[2]
+ }
> 
> bootstrap_iv <- function(i)
+ {
+     y <- d$log.M_BH.M_Sun. + rnorm(length(d$log.M_BH.M_Sun.))*d$log.M_BH.M_Sun._std
+     x <- d$log.M_sph.M_Sun. + rnorm(length(d$log.M_sph.M_Sun.))*d$log.M_sph.M_Sun._std
+     z <- d$log.M_DM.M_Sun. + rnorm(length(d$log.M_DM.M_Sun.))*d$log.M_DM.M_Sun._std
+     ivreg(y ~ x | z)$coefficients[2]
+ }
> 
> pdf("bootstrap_errors.pdf")
> plot(density(sapply(1:1000, bootstrap_ols)), xlim = c(0,5), xlab = "regression coefficient", ylab = "frequency", main = "")
> lines(density(sapply(1:1000, bootstrap_iv)), col = "#C44218")
> 
> predicted_values <- lm(d$log.M_sph.M_Sun. ~ d$log.M_DM.M_Sun.)$fitted.values
> secondstage <- lm(d$log.M_BH.M_Sun. ~ predicted_values)
> summary(secondstage)

Call:
lm(formula = d$log.M_BH.M_Sun. ~ predicted_values)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.96981 -0.35456  0.00662  0.27341  0.96204 

Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
(Intercept)      -14.0488     3.3543  -4.188 0.000197 ***
predicted_values   2.1062     0.3304   6.375 3.21e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.5005 on 33 degrees of freedom
Multiple R-squared:  0.5519,	Adjusted R-squared:  0.5383 
F-statistic: 40.64 on 1 and 33 DF,  p-value: 3.215e-07

> 
> pdf("naive_OLS.pdf")
> plot(d$log.M_sph.M_Sun., d$log.M_BH.M_Sun., ylab = expression(M[BH]), xlab = expression(M[bulge]), main = "Naive OLS regression", pch = 16)
> arrows(d$log.M_sph.M_Sun. - d$log.M_sph.M_Sun._std, d$log.M_BH.M_Sun., d$log.M_sph.M_Sun. + d$log.M_sph.M_Sun._std, d$log.M_BH.M_Sun., angle=90, length=0)
> arrows(d$log.M_sph.M_Sun., d$log.M_BH.M_Sun. - d$log.M_BH.M_Sun._std, d$log.M_sph.M_Sun., d$log.M_BH.M_Sun. + d$log.M_BH.M_Sun._std, angle=90, length=0)
> #abline(mean(d$log.M_BH.M_Sun.)-mean(d$log.M_sph.M_Sun.),1, col = "#A0A0A0")
> #abline(mean(d$log.M_BH.M_Sun.)-2*mean(d$log.M_sph.M_Sun.),2, col = "#C44218")
> abline(naive_OLS$coefficients)
> abline(secondstage$coefficients, col = "#C44218")
> 
> pdf("second_stage.pdf")
> plot(predicted_values, d$log.M_BH.M_Sun., ylab = expression(M[BH]), xlab = expression("Predicted "*M[bulge]), main = "Second stage IV regression", pch = 16)
> #abline(mean(d$log.M_BH.M_Sun.)-2*mean(predicted_values),2, col = "#C44218")
> #abline(mean(d$log.M_BH.M_Sun.)-mean(predicted_values),1, col = "#A0A0A0")
> abline(naive_OLS$coefficients)
> abline(secondstage$coefficients, col = "#C44218")
> 
> ##is this worth getting into?
> #pdf("conditional_independence.pdf")
> #coplot(d$log.M_BH.M_Sun. ~ d$log.M_DM.M_Sun. | d$log.M_sph.M_Sun., number = 9, ylab = expression(M[BH]), xlab = expression(M[halo]), pch =16, col = "#888888")
> #summary(lm(d$log.M_BH.M_Sun. ~ d$log.M_DM.M_Sun. + d$log.M_sph.M_Sun.)) #coefficient of d$log.M_DM.M_Sun. should be insignificant
> 
> 
> 
> proc.time()
 사용자  시스템 elapsed 
  5.947   0.227   6.209 
